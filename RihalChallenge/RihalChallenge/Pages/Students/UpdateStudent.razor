@page "/update-student/{Id:guid}"
@using Microsoft.AspNetCore.Components
@using RihalChallenge.Client.Forms
@using RihalChallenge.Client.Stores.ClassesStore.GetClasses
@using RihalChallenge.Client.Stores.Countries
@using RihalChallenge.Client.Stores.Countries.GetCountries
@using RihalChallenge.Client.Stores.StudentsStore
@using RihalChallenge.Client.Stores.StudentsStore.UpdateStudent
@inject IDispatcher Dispatcher
@inject IState<CountriesState> CountriesState
@inject IState<StateStore> StudentsState
<h3>Update Student</h3>



<EditForm Model="@formModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="name" class="form-label">Name</label>
        <InputText id="name" class="form-control" @bind-Value="formModel.Name"> Name </InputText>
    </div>
    <br/>
    <div>
        <label for="dob" class="form-label">Day of birth</label>
        <InputDate id="dob" @bind-Value="formModel.DayOfBirth" class="form-control"> Day of Birth </InputDate>
    </div>
    <br/>
    <div>
        <label for="class">Class</label>
        <InputSelect id="class" @bind-Value="formModel.ClassId" class="form-select">
            @foreach(var studentClass in StudentsState.Value.Classes)
            {
                <option value="@studentClass.Id">@studentClass.Name</option>
            }
        </InputSelect>
    </div>
    <br/>
    <div>
        <label for="country">Country</label>
        <InputSelect id="country" class="form-select" @bind-Value="formModel.CountryId">
            @foreach(var country in CountriesState.Value.Countries)
            {
                <option value="@country.Id">@country.Name</option>
            }

        </InputSelect>
    </div>
        <br/>
    <div>
        
        <button type="submit" class="btn btn-primary">Submit</button>
        <NavLink class="nav-link" href="students">
            <button class="btn btn-secondary">Back</button>
        </NavLink>
        
    </div>
</EditForm>

@code {
    
    [Parameter]
    public Guid Id { get; set; }
    
    
    private UpdateStudentFormModel formModel = new();
    
    protected override void OnInitialized()
    {
        base.OnInitializedAsync();
        
        Dispatcher.Dispatch(new GetStudentAction(Id));
        Dispatcher.Dispatch(new GetClassesAction());
        Dispatcher.Dispatch(new GetCountriesAction());
        
            formModel.Name = StudentsState.Value?.SelectedStudent.StudentName;

            var country = CountriesState.Value.Countries.First(x => x.Name == StudentsState.Value.SelectedStudent.CountryName);
            formModel.CountryId = country.Id;

            formModel.DayOfBirth = StudentsState.Value.SelectedStudent.DayOfBirth;

            var studentsClass = StudentsState.Value.Classes.First(x => x.Name == StudentsState.Value.SelectedStudent.ClassName);
            formModel.ClassId = studentsClass.Id;
        
    }

    private void HandleValidSubmit()
    {
        //TODO: change to update user action
        Dispatcher.Dispatch(new UpdateStudentAction(Id,formModel.CountryId,formModel.ClassId, formModel.Name, formModel.DayOfBirth));
    }

    private string GetId()
    {
        return StudentsState.Value.SelectedStudent.Id.ToString();
    }

}
