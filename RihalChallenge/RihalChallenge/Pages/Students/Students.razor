@page "/students"

@using RihalChallenge.Client.Stores.StudentsStore
@inject IDispatcher Dispatcher
@inject IState<StudentsState> StudentState


<PageTitle>Classes</PageTitle>

<h1>Classes List</h1>

@if ((bool)StudentState.Value.IsLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <NavLink class="nav-link" href="add-student">
        <span class="oi oi-list-rich" aria-hidden="true"></span> Add Student
    </NavLink>
    <table class="table">
        <thead>
        <tr>
            <th>StudentId</th>
            <th>Name</th>
            <th>Class</th>
            <th>Country</th>
            <th>Day of Birth</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var student in StudentState.Value.Students)
        {
            <tr>
                <td>@student.Id</td>
                <td>@student.StudentName</td>
                <td>@student.ClassName</td>
                <td>@student.CountryName</td>
                <td>@student.DayOfBirth</td>
                <td>
                    <button @onclick="() => DeleteStudent(student.Id)">❌</button>
                    
                    <NavLink href="@($"/update-student/{student.Id}")">📝</NavLink>
                </td>
            </tr>
        }
        </tbody>
    </table>

}

@code {
    
    protected override void OnInitialized()
    {
        //base.OnInitialized();
        Dispatcher.Dispatch(new GetStudentsAction());
    }


    protected void DeleteStudent(Guid id)
    {
        Dispatcher.Dispatch(new DeleteStudentAction(id));
    }


}


